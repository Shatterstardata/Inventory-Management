# -*- coding: utf-8 -*-
"""Capstone Project Module 1 Purwadhika.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KFCsHdhlWAgr9pyCABtjzdR5W_4j4DJt

#Kode Program Inventory Management
"""

import re
from tabulate import tabulate

# Dummy dataset: A list of dictionaries representing inventory
inventory = [
    {'SKU': 'SKU001', 'Product type': 'Cosmetics', 'Availability': 'In stock', 'Stock levels': 150, 'Lead times': '3 days', 'Shipping costs': 5.0, 'Supplier name': 'Supplier 1'},
    {'SKU': 'SKU002', 'Product type': 'Skincare', 'Availability': 'Out of stock', 'Stock levels': 0, 'Lead times': '7 days', 'Shipping costs': 8.0, 'Supplier name': 'Supplier 2'},
    {'SKU': 'SKU003', 'Product type': 'Haircare', 'Availability': 'In stock', 'Stock levels': 80, 'Lead times': '5 days', 'Shipping costs': 9.0, 'Supplier name': 'Supplier 3'},
    {'SKU': 'SKU004', 'Product type': 'Cosmetics', 'Availability': 'In stock', 'Stock levels': 200, 'Lead times': '2 days', 'Shipping costs': 5.0, 'Supplier name': 'Supplier 4'},
    {'SKU': 'SKU005', 'Product type': 'Skincare', 'Availability': 'In stock', 'Stock levels': 50, 'Lead times': '4 days', 'Shipping costs': 8.0, 'Supplier name': 'Supplier 5'},
    {'SKU': 'SKU006', 'Product type': 'Haircare', 'Availability': 'Out of stock', 'Stock levels': 0, 'Lead times': '6 days', 'Shipping costs': 9.5, 'Supplier name': 'Supplier 6'},
    {'SKU': 'SKU007', 'Product type': 'Cosmetics', 'Availability': 'In stock', 'Stock levels': 130, 'Lead times': '3 days', 'Shipping costs': 5.5, 'Supplier name': 'Supplier 7'},
    {'SKU': 'SKU008', 'Product type': 'Skincare', 'Availability': 'In stock', 'Stock levels': 90, 'Lead times': '5 days', 'Shipping costs': 8.0, 'Supplier name': 'Supplier 8'},
    {'SKU': 'SKU009', 'Product type': 'Haircare', 'Availability': 'In stock', 'Stock levels': 75, 'Lead times': '7 days', 'Shipping costs': 9.5, 'Supplier name': 'Supplier 9'},
    {'SKU': 'SKU010', 'Product type': 'Cosmetics', 'Availability': 'Out of stock', 'Stock levels': 0, 'Lead times': '8 days', 'Shipping costs': 5.0, 'Supplier name': 'Supplier 10'}
]

users = {'manager1': {'role': 'Manager', 'password': 'pass123'}}

# General function to handle input validation
def get_validated_input(prompt, validation_func=None, error_message="Invalid input! Please try again."):
    while True:
        value = input(prompt).strip()
        if value.lower() == 'back':
            return 'back'
        if value and (validation_func is None or validation_func(value)):
            return value
        print(error_message)

# Validation functions
def validate_sku(sku):
    return re.match(r'^SKU\d+$', sku) is not None

def validate_availability(availability):
    return availability.lower() in ['in stock', 'out of stock']

def validate_lead_times(lead_times):
    return re.match(r'^\d+ days$', lead_times) is not None

def validate_supplier_name(supplier):
    return re.match(r'^supplier \d+$', supplier.lower()) is not None

# Input functions
def get_integer_input(prompt):
    while True:
        value = input(prompt).strip()
        if value.lower() == 'back':
            return 'back'
        try:
            return int(value)
        except ValueError:
            print("Invalid input! Please enter a valid number.")

def get_float_input(prompt):
    while True:
        value = input(prompt).strip()
        if value.lower() == 'back':
            return 'back'
        try:
            return float(value)
        except ValueError:
            print("Invalid input! Please enter a valid number.")

# Manager Menu functions
# Add a product
def add_product(inventory):
    while True:
        sku = get_validated_input("Enter SKU: ", validate_sku, "Invalid SKU format! (e.g., SKU001)")
        if sku == 'back':
            return
        if not any(product['SKU'] == sku for product in inventory):
            break
        else:
            print("SKU already exists!")

    product_type = get_validated_input("Enter Product Type: ").capitalize()
    if product_type == 'back':
        return

    availability = get_validated_input("Enter Availability (In stock / Out of stock): ", validate_availability, "Invalid availability! (In stock / Out of stock)").capitalize()
    if availability == 'back':
        return

    stock_levels = get_integer_input("Enter Stock Levels: ")
    if stock_levels == 'back':
        return

    lead_times = get_validated_input("Enter Lead Times (e.g., '5 days'): ", validate_lead_times, "Invalid lead times format! (e.g., '5 days')")
    if lead_times == 'back':
        return

    shipping_costs = get_float_input("Enter Shipping Costs: ")
    if shipping_costs == 'back':
        return

    supplier_name = get_validated_input("Enter Supplier Name: ", validate_supplier_name, "Invalid supplier name format! (e.g., 'Supplier 1')").capitalize()
    if supplier_name == 'back':
        return

    # Add new product to the inventory
    inventory.append({
        'SKU': sku,
        'Product type': product_type,
        'Availability': availability,
        'Stock levels': stock_levels,
        'Lead times': lead_times,
        'Shipping costs': shipping_costs,
        'Supplier name': supplier_name
    })
    print(f"Product {sku} added successfully.\n")

# Update product function - now more versatile
def update_product(inventory):
    sku = get_validated_input("Enter SKU: ", validate_sku, "Invalid SKU format! (e.g., SKU001)")
    if sku == 'back':
        print("Returning to the main menu...")
        return

    product = next((item for item in inventory if item['SKU'] == sku), None)
    if not product:
        print("Product not found!")
        return

    # Store a copy of the original product details
    original_product = product.copy()

    # Print the product details before update
    print("\n--- Current Product Status ---")
    print(product)

    print("\nUpdating product details. Type 'back' at any prompt to cancel the update.")

    # Product Type
    new_product_type = input(f"Enter new Product Type (or press Enter to keep '{product['Product type']}'): ").capitalize()
    if new_product_type.lower() == 'back':
        print("Returning to the main menu...")
        return
    elif new_product_type:  # Only update if input is not empty
        product['Product type'] = new_product_type

    # Availability (Validated)
    new_availability = input(f"Enter new Availability (or press Enter to keep '{product['Availability']}'): ").capitalize()
    if new_availability.lower() == 'back':
        print("Returning to the main menu...")
        return
    elif new_availability and validate_availability(new_availability):
        product['Availability'] = new_availability
    elif new_availability:
        print("Invalid availability! Keeping the current value.")

    # Stock Levels (Integer)
    new_stock_levels = input(f"Enter new Stock Levels (or press Enter to keep '{product['Stock levels']}'): ")
    if new_stock_levels.lower() == 'back':
        print("Returning to the main menu...")
        return
    elif new_stock_levels:
        try:
            product['Stock levels'] = int(new_stock_levels)
        except ValueError:
            print("Invalid input for stock levels. Keeping the current value.")

    # Lead Times (Validated)
    new_lead_times = input(f"Enter new Lead Times (or press Enter to keep '{product['Lead times']}'): ")
    if new_lead_times.lower() == 'back':
        print("Returning to the main menu...")
        return
    elif new_lead_times and validate_lead_times(new_lead_times):
        product['Lead times'] = new_lead_times
    elif new_lead_times:
        print("Invalid lead times! Keeping the current value.")

    # Shipping Costs (Float)
    new_shipping_costs = input(f"Enter new Shipping Costs (or press Enter to keep '{product['Shipping costs']}'): ")
    if new_shipping_costs.lower() == 'back':
        print("Returning to the main menu...")
        return
    elif new_shipping_costs:
        try:
            product['Shipping costs'] = float(new_shipping_costs)
        except ValueError:
            print("Invalid input for shipping costs. Keeping the current value.")

    # Supplier Name (Validated)
    new_supplier_name = input(f"Enter new Supplier Name (or press Enter to keep '{product['Supplier name']}'): ").capitalize()
    if new_supplier_name.lower() == 'back':
        print("Returning to the main menu...")
        return
    elif new_supplier_name and validate_supplier_name(new_supplier_name):
        product['Supplier name'] = new_supplier_name
    elif new_supplier_name:
        print("Invalid supplier name! Keeping the current value.")

    # Displaying the before and after state of the product
    print("\n--- Product Update Summary ---")
    print("After update:", product)
    print("Product updated successfully.")

# Deletion functions and feature
'''
List to store deleted products as backup
'''
backup_list = []

'''
Delete a product but keep a backup in a list
'''
def delete_product(inventory):
    sku = get_validated_input("Enter SKU to delete: ", validate_sku, "Invalid SKU format! (e.g., SKU001)")
    if sku == 'back':
        return

    for product in inventory:
        if product['SKU'] == sku:
            confirm = get_validated_input(f"Are you sure you want to delete {product['Product type']}? (y/n): ").lower()
            if confirm == 'back':
                return
            if confirm == 'y':
                # Store product in backup list before removing
                backup_list.append(product.copy())
                inventory.remove(product)
                print(f"Product {sku} deleted successfully and added to backup.")
            else:
                print("Deletion cancelled.")
            return
    print("Product not found!")

'''
Restore all products from the backup list to the inventory
'''
def restore_backup(inventory):
    if not backup_list:
        print("No backup data available to restore.")
        return

    # Restore each item from the backup list back to the inventory
    for item in backup_list:
        if item not in inventory:
            inventory.append(item)

    # Clear the backup list after restoring
    backup_list.clear()
    print("All products have been restored from backup.")

'''
Clear all backup data
'''
def clear_backup():
    if not backup_list:
        print("No backup data to clear.")
        return

    backup_list.clear()
    print("All backup data has been deleted.")

# View Inventory in a table format and show deleted products as backup if any
def view_inventory(inventory):
    if not inventory:
        print("Inventory is empty.")
    else:
        # Create headers and table data for tabulate
        headers = ["SKU", "Product Type", "Availability", "Stock Levels", "Lead Times", "Shipping Costs", "Supplier Name"]
        table_data = [[
            product['SKU'],
            product['Product type'].upper(),
            product['Availability'],
            product['Stock levels'],
            product['Lead times'],
            product['Shipping costs'],
            product['Supplier name'].upper()
        ] for product in inventory]

        # Print the inventory table
        print("\n=== Current Inventory ===")
        print(tabulate(table_data, headers, tablefmt="grid"))

    # Check if any products have been deleted and display backup if available
    if backup_list:
        print("\n=== Deleted Products Backup ===")
        backup_table_data = [[
            product['SKU'],
            product['Product type'].upper(),
            product['Availability'],
            product['Stock levels'],
            product['Lead times'],
            product['Shipping costs'],
            product['Supplier name'].upper()
        ] for product in backup_list]

        print(tabulate(backup_table_data, headers, tablefmt="grid"))
    else:
        print("\nNo deleted products to display.")

# Sort Inventory function and its features
import copy
original_inventory = copy.deepcopy(inventory) # Create a deep copy of the original inventory
'''
Sort Inventory function
'''
def sort_inventory(inventory):
    if not inventory:
        print("Inventory is empty! Nothing to sort.")
        return

    print("\n==== Sort Products ====")
    print("Sort by:")
    print("1. Product Type")
    print("2. SKU")
    print("3. Stock Levels")
    print("4. Lead Times")
    print("5. Shipping Costs")

    field_choice = input("Enter the field number to sort by: ").strip()
    if field_choice == '1':
        sort_key = 'Product type'
    elif field_choice == '2':
        sort_key = 'SKU'
    elif field_choice == '3':
        sort_key = 'Stock levels'
    elif field_choice == '4':
        sort_key = 'Lead times'
    elif field_choice == '5':
        sort_key = 'Shipping costs'
    else:
        print("Invalid choice! Returning to main menu...")
        return

    order_choice = input("Sort in ascending order? (y/n): ").strip().lower()
    reverse_order = order_choice != 'y'

  #sort the inventory
    try:
        inventory.sort(key=lambda x: (float(x[sort_key])
                                      if sort_key in ['Stock levels', 'Shipping costs'] else x[sort_key]),
                       reverse=reverse_order)
        print("\nInventory Sorted Successfully!")
        print(tabulate(inventory, headers="keys", tablefmt="grid"))
    except KeyError:
        print(f"Error: '{sort_key}' is not a valid field.")

    # Reset inventory back to its original order after sorting
    inventory[:] = copy.deepcopy(original_inventory)

# Low stock alert in table format
def low_stock_alert(inventory):
    threshold = get_integer_input("Enter threshold for low stock alert: ")
    if threshold == 'back':
        return

    # Create headers and table data for products with low stock
    headers = ["SKU", "Product Type", "Stock Levels", "Availability"]

    # Update the availability status for each product based on the threshold
    for product in inventory:
        product['Availability'] = "Low Stock" if product['Stock levels'] < threshold else "In Stock"

    # Filter products that are currently low stock
    low_stock_items = [product for product in inventory if product['Stock levels'] < threshold]

    if low_stock_items:
        # Display low stock items in a table
        table_data = [[
            product['SKU'],
            product['Product type'].upper(),
            product['Stock levels'],
            product['Availability']
        ] for product in low_stock_items]

        print("\nLow Stock Products:")
        print(tabulate(table_data, headers, tablefmt="grid"))

        # Ask the user if they want to restock items
        restock_choice = get_validated_input("Would you like to restock some of these items? (yes/no): ").strip().lower()
        if restock_choice == 'back':
            return

        if restock_choice == "yes":
            while True:
                sku = input("Enter the SKU to restock or type 'back' to go back: ").strip().upper()

                if sku == "BACK":
                    print("Returning to the main menu...")
                    break

                # Find the product by SKU in the low_stock_items list
                matching_product = next((item for item in low_stock_items if item['SKU'] == sku), None)

                if matching_product:
                    restock_amount = get_integer_input(f"How many units would you like to restock for {sku}?: ")
                    if restock_amount == 'back':
                        return
                    matching_product['Stock levels'] += restock_amount
                    print(f"{restock_amount} units added to {sku}. New stock level: {matching_product['Stock levels']}")

                    # Check if stock level now exceeds the threshold
                    if matching_product['Stock levels'] >= threshold:
                        matching_product['Availability'] = "In Stock"
                        print(f"{sku} is now marked as 'In Stock'.")
                else:
                    print(f"SKU {sku} not found in low stock items. Please try again.")
        else:
            print("No restocking performed. Returning to the main menu.")
    else:
        print(f"No products with stock levels below {threshold}.")

# Simplified Manager Menu
# Manager menu
def manager_menu():
    while True:
        print("\nManager Menu:")
        print("1. Add Product")
        print("2. Update Product")
        print("3. Delete Product")
        print("4. Restore Backup Data")
        print("5. Clear Backup Data")
        print("6. View Inventory")
        print("7. Sort Inventory")
        print("8. Low Stock Alert")
        print("9. Logout")

        choice = input("Select an option: ")

        if choice == '1':
            add_product(inventory)
        elif choice == '2':
            update_product(inventory)
        elif choice == '3':
            delete_product(inventory)
        elif choice == '4':
            restore_backup(inventory)
        elif choice == '5':
            clear_backup()
        elif choice == '6':
            view_inventory(inventory)
        elif choice == '7':
            sort_inventory(inventory)
        elif choice == '8':
            low_stock_alert(inventory)
        elif choice == '9':
            print("Logged out successfully.")
            break
        else:
            print("Invalid choice! Please select a valid option.")

# Login function with attempt limit
def login():
    attempts = 3
    while attempts > 0:
        username = input("Enter username: ").strip().lower()
        password = input("Enter password: ").strip()

        if users.get(username) and users[username]['password'] == password:
            print(f"Welcome, {users[username]['role']}! You are now logged in to the RMA system.")
            return True
        else:
            attempts -= 1
            print(f"Login failed! Attempts left: {attempts}")

    print("Account locked! Please try again later.")
    return False

def main_menu():
    print("Welcome to the RMA Warehouse Management System!")
    if login():
        manager_menu()

# Run the main program
main_menu()

